#include "firmware.hpp"
#include "music/Player.hpp"
#include "music/cmidi/bigbr.h"
#include "music/cmidi/makaimura.h"
#include "music/cmidi/rockman_dr_wily.h"
#include "music/cmidi/ugoku.h"

Player player(&mixier, &square1, &square2, &square3, &sawtooth, &triangle);

void piano();

void init() {
  set_irq_mask(0);
  serial.baud(460800);
  gpio.mode(GPIO::Mode::OUT);

  sampling.set(0x16A);  // 16MHz / 44.1kHz
  square1.set_clk(CLK_FREQ / 2);
  square2.set_clk(CLK_FREQ / 2);
  square3.set_clk(CLK_FREQ / 2);
  sawtooth.set_clk(CLK_FREQ / 256);
  triangle.set_clk(CLK_FREQ / 256 / 2);
  mixier.set_vol(0, 1);
  mixier.set_vol(1, 0);
  mixier.set_vol(2, 1);
  mixier.set_vol(3, 2);
  mixier.set_vol(4, 4);

  serial << "  _  _         _       __  __ ___ ___ ___  _  _  \n"
            " | \\| |_____ _| |_ ___|  \\/  |_ _/ __/ _ \\| \\| | \n"
            " | .` / -_) \\ /  _|___| |\\/| || | (_| (_) | .` | \n"
            " |_|\\_\\___/_\\_\\\\__|   |_|  |_|___\\___\\___/|_|\\_| \n"
            "\n"
            "        32bit RISC-V microcontroller\n"
            "     generated by Next-MICON micon-generator\n"
            "  https://github.com/Next-MICON/micon-generator\n\n";
}

void loop() {
  char cmd;
  while(true) {
    serial << "Select:\n"
              " [a] Blink LED (GPIO)\n"
              " [b] Blink LED (PWM)\n"
              " [c] Sownd\n"
              " [d] Piano\n"
              " [e] Play Music (Rockman)\n"
              " [f] Play Music (Ugoku)\n"
              " [g] Play Music (Makaimura)\n"
              " [h] Play Music (FF)\n";
    serial >> cmd;
    if(cmd == 'a') {
      serial << "=== Blink LED (GPIO) ===\n";
      sel.select(0);
      gpio_blink(gpio);
      sel.unselect();
      serial << "=== end ===\n";
    }
    if(cmd == 'b') {
      serial << "=== Blink LED (PWM) ===\n";
      sel.select(1);
      pwm_blink(pwm);
      sel.unselect();
      serial << "=== end ===\n";
    }
    if(cmd == 'c') {
      serial << "=== Play Sownd ===\n";
      uint32_t tempo = 120;
      player.arpeggio(48, 52, 55, tempo);
      player.arpeggio(53, 57, 60, tempo);
      player.arpeggio(55, 59, 62, tempo);
      player.arpeggio(55, 60, 64, tempo);
      serial << "=== end ===\n";
    }
    if(cmd == 'd') {
      serial << "=== Piano (exit: \\n) ===\n";
      piano();
      serial << "\n=== end ===\n";
    }
    if(cmd == 'e') {
      serial << "=== Play Music ===\n";
      serial << "  /\\_/\\ \n"
                "6/ '-' )__ \n"
                "(    >____|| o o \n"
                " )  /\\ \\ \n"
                "(__)  \\_> \n";
      player.music(rockman_dr_wily_music, rockman_dr_wily_len);
      serial << "=== end ===\n";
    }
    if(cmd == 'f') {
      serial << "=== Play Music ===\n"
             << " .. (  '-')\n";
      mixier.set_vol(0, 0);
      mixier.set_vol(1, 0);
      mixier.set_vol(2, 0);
      player.music(ugoku_music, ugoku_len);
      serial << "=== end ===\n";
    }
    if(cmd == 'g') {
      serial << "=== Play Music ===\n";
      mixier.set_vol(0, 0);
      mixier.set_vol(1, 0);
      mixier.set_vol(2, 0);
      player.music(makaimura_music, makaimura_len);
      serial << "=== end ===\n";
    }
    if(cmd == 'h') {
      serial << "=== Play Music ===\n";
      mixier.set_vol(0, 1);
      mixier.set_vol(1, 0);
      mixier.set_vol(2, 0);
      player.music(bigbr_music, bigbr_len);
      serial << "=== end ===\n";
    }
  }
}

uint32_t* irq(uint32_t* regs, uint32_t irqs) {
  static uint32_t irq_counts[32] = {0};
  serial << "\nIRQ:";
  for(uint32_t i = 0; i < 32; ++i) {
    if((irqs & (1 << i)) != 0) {
      ++irq_counts[i];
      serial << " #" << i << "*" << irq_counts[i];
    }
  }
  serial << "\n";
  return regs;
}

void piano() {
  const int N_CH = 5;
  static const char* keys = "zsxdcvgbhnjm,l.;/";
  static const char* keyboard_black = "\e[7m:\e[0m \e[7m \e[0m \e[7m \e[0m\e[7m \e[0m \e[7m \e[0m \e[7m \e[0m \e[7m \e[0m";
  static const char* keyboard_white = "\e[7m:           \e[0m";
  static const char* keyboard_black_key = "\e[7m:\e[0mS\e[7m \e[0mD\e[7m  \e[0mG\e[7m \e[0mH\e[7m \e[0mJ\e[7m \e[0m";
  static const char* keyboard_white_key = "\e[7mZ X CV B N M\e[0m";
  static const char* erase = "\r           :           :           :           :           :           :           :           :           |\r";
  static const char* tab = "           ";
  static const char* ch_name[N_CH] = {"square1", "square2", "square3", "sawtooth", "triangle"};

  const uint32_t OCT_MIN = 1;
  const uint32_t OCT_MAX = 8;

  uint32_t ch = 0;
  uint32_t octave = 3;
  uint32_t notes[N_CH] = {0};

  for(char cmd;;) {

    // Show Keyboard
    serial << tab;
    for(uint32_t i = OCT_MIN; i <= OCT_MAX; ++i) serial << i << (i == octave ? "-----------" : "           ");
    serial << "|" << UART::endl;
    serial << tab;
    for(uint32_t i = OCT_MIN; i <= OCT_MAX; ++i) serial << keyboard_black;
    serial << "|\n";
    serial << tab;
    for(uint32_t i = OCT_MIN; i <= OCT_MAX; ++i) serial << keyboard_white;
    serial << "|\n";
    for(int i = 0; i < N_CH; ++i) {
      serial << erase;
      serial << (i == ch ? "> " : "  ") << ch_name[i] << "\r";
      if(notes[i] != 0) serial << "\e[" << notes[i] - 1 << "C*";
      serial << UART::endl;
    }
    serial << "\e[8F";

    serial >> cmd;
    // Exit
    if(cmd == '\n') break;
    // Change Octave
    if(OCT_MIN <= cmd - '0' && cmd - '0' <= OCT_MAX) octave = cmd - '0';
    // Change Channel
    if(cmd == 'q') ch = 0;
    if(cmd == 'w') ch = 1;
    if(cmd == 'e') ch = 2;
    if(cmd == 'r') ch = 3;
    if(cmd == 't') ch = 4;
    // Stop note
    if(cmd == ' ') {
      player.stop(ch);
      notes[ch] = 0;
    }
    // Play sownd
    for(int i = 0; i < 17; ++i) {
      if(cmd == keys[i]) {
        int note = octave * 12 + i;
        notes[ch] = note;
        player.play(ch, note);
      }
    }
  }
  player.stop(0);
  player.stop(1);
  player.stop(2);
  player.stop(3);
  player.stop(4);
  serial << "\n\n\n\n\n\n\n\n";
}
